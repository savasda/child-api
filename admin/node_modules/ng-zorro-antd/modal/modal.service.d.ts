/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { Injector, OnDestroy } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ConfirmType, ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzModalService implements OnDestroy {
    private overlay;
    private injector;
    private nzConfigService;
    private parentModal;
    private openModalsAtThisLevel;
    private readonly afterAllClosedAtThisLevel;
    get openModals(): NzModalRef[];
    get _afterAllClosed(): Subject<void>;
    readonly afterAllClose: Observable<void>;
    constructor(overlay: Overlay, injector: Injector, nzConfigService: NzConfigService, parentModal: NzModalService);
    create<T, R = NzSafeAny>(config: ModalOptions<T, R>): NzModalRef<T, R>;
    closeAll(): void;
    confirm<T>(options?: ModalOptions<T>, confirmType?: ConfirmType): NzModalRef<T>;
    info<T>(options?: ModalOptions<T>): NzModalRef<T>;
    success<T>(options?: ModalOptions<T>): NzModalRef<T>;
    error<T>(options?: ModalOptions<T>): NzModalRef<T>;
    warning<T>(options?: ModalOptions<T>): NzModalRef<T>;
    private open;
    private removeOpenModal;
    private closeModals;
    private createOverlay;
    private attachModalContainer;
    private attachModalContent;
    private createInjector;
    private confirmFactory;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalService, [null, null, null, { optional: true; skipSelf: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgSW5qZWN0b3IsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL2NvbmZpZyc7XG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbW9kYWwtcmVmJztcbmltcG9ydCB7IENvbmZpcm1UeXBlLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56TW9kYWxTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIG92ZXJsYXk7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIG56Q29uZmlnU2VydmljZTtcbiAgICBwcml2YXRlIHBhcmVudE1vZGFsO1xuICAgIHByaXZhdGUgb3Blbk1vZGFsc0F0VGhpc0xldmVsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYWZ0ZXJBbGxDbG9zZWRBdFRoaXNMZXZlbDtcbiAgICBnZXQgb3Blbk1vZGFscygpOiBOek1vZGFsUmVmW107XG4gICAgZ2V0IF9hZnRlckFsbENsb3NlZCgpOiBTdWJqZWN0PHZvaWQ+O1xuICAgIHJlYWRvbmx5IGFmdGVyQWxsQ2xvc2U6IE9ic2VydmFibGU8dm9pZD47XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogT3ZlcmxheSwgaW5qZWN0b3I6IEluamVjdG9yLCBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZSwgcGFyZW50TW9kYWw6IE56TW9kYWxTZXJ2aWNlKTtcbiAgICBjcmVhdGU8VCwgUiA9IE56U2FmZUFueT4oY29uZmlnOiBNb2RhbE9wdGlvbnM8VCwgUj4pOiBOek1vZGFsUmVmPFQsIFI+O1xuICAgIGNsb3NlQWxsKCk6IHZvaWQ7XG4gICAgY29uZmlybTxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+LCBjb25maXJtVHlwZT86IENvbmZpcm1UeXBlKTogTnpNb2RhbFJlZjxUPjtcbiAgICBpbmZvPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4pOiBOek1vZGFsUmVmPFQ+O1xuICAgIHN1Y2Nlc3M8VD4ob3B0aW9ucz86IE1vZGFsT3B0aW9uczxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgZXJyb3I8VD4ob3B0aW9ucz86IE1vZGFsT3B0aW9uczxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgd2FybmluZzxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBwcml2YXRlIG9wZW47XG4gICAgcHJpdmF0ZSByZW1vdmVPcGVuTW9kYWw7XG4gICAgcHJpdmF0ZSBjbG9zZU1vZGFscztcbiAgICBwcml2YXRlIGNyZWF0ZU92ZXJsYXk7XG4gICAgcHJpdmF0ZSBhdHRhY2hNb2RhbENvbnRhaW5lcjtcbiAgICBwcml2YXRlIGF0dGFjaE1vZGFsQ29udGVudDtcbiAgICBwcml2YXRlIGNyZWF0ZUluamVjdG9yO1xuICAgIHByaXZhdGUgY29uZmlybUZhY3Rvcnk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==