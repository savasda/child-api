/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { AnimationEvent } from '@angular/animations';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare function throwNzModalContentAlreadyAttachedError(): never;
export declare class BaseModalContainer extends BasePortalOutlet implements OnDestroy {
    protected elementRef: ElementRef;
    protected focusTrapFactory: FocusTrapFactory;
    cdr: ChangeDetectorRef;
    protected render: Renderer2;
    protected zone: NgZone;
    protected overlayRef: OverlayRef;
    protected nzConfigService: NzConfigService;
    config: ModalOptions;
    protected animationType?: string | undefined;
    portalOutlet: CdkPortalOutlet;
    modalElementRef: ElementRef<HTMLDivElement>;
    animationStateChanged: EventEmitter<AnimationEvent>;
    containerClick: EventEmitter<void>;
    cancelTriggered: EventEmitter<void>;
    okTriggered: EventEmitter<void>;
    onDestroy: EventEmitter<void>;
    state: 'void' | 'enter' | 'exit';
    document: Document;
    modalRef: NzModalRef;
    isStringContent: boolean;
    private elementFocusedBeforeModalWasOpened;
    private focusTrap;
    private latestMousedownTarget;
    private oldMaskStyle;
    protected destroy$: Subject<unknown>;
    get showMask(): boolean;
    get maskClosable(): boolean;
    constructor(elementRef: ElementRef, focusTrapFactory: FocusTrapFactory, cdr: ChangeDetectorRef, render: Renderer2, zone: NgZone, overlayRef: OverlayRef, nzConfigService: NzConfigService, config: ModalOptions, document?: NzSafeAny, animationType?: string | undefined);
    onMousedown(e: MouseEvent): void;
    onMouseup(e: MouseEvent): void;
    onCloseClick(): void;
    onOkClick(): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    getNativeElement(): HTMLElement;
    private animationDisabled;
    private setModalTransformOrigin;
    private savePreviouslyFocusedElement;
    private trapFocus;
    private restoreFocus;
    private setEnterAnimationClass;
    private setExitAnimationClass;
    private cleanAnimationClass;
    private bindBackdropStyle;
    /**
     * Set the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private setContainer;
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private resetContainer;
    private getContainer;
    updateMaskClassname(): void;
    onAnimationDone(event: AnimationEvent): void;
    onAnimationStart(event: AnimationEvent): void;
    startExitAnimation(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseModalContainer, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseModalContainer, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udGFpbmVyLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLWNvbnRhaW5lci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBCYXNlUG9ydGFsT3V0bGV0LCBDZGtQb3J0YWxPdXRsZXQsIENvbXBvbmVudFBvcnRhbCwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekNvbmZpZ1NlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvY29uZmlnJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOek1vZGFsUmVmIH0gZnJvbSAnLi9tb2RhbC1yZWYnO1xuaW1wb3J0IHsgTW9kYWxPcHRpb25zIH0gZnJvbSAnLi9tb2RhbC10eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiB0aHJvd056TW9kYWxDb250ZW50QWxyZWFkeUF0dGFjaGVkRXJyb3IoKTogbmV2ZXI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXNlTW9kYWxDb250YWluZXIgZXh0ZW5kcyBCYXNlUG9ydGFsT3V0bGV0IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeTtcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByb3RlY3RlZCByZW5kZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lO1xuICAgIHByb3RlY3RlZCBvdmVybGF5UmVmOiBPdmVybGF5UmVmO1xuICAgIHByb3RlY3RlZCBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZTtcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgYW5pbWF0aW9uVHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBwb3J0YWxPdXRsZXQ6IENka1BvcnRhbE91dGxldDtcbiAgICBtb2RhbEVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICAgIGFuaW1hdGlvblN0YXRlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkV2ZW50PjtcbiAgICBjb250YWluZXJDbGljazogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNhbmNlbFRyaWdnZXJlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIG9rVHJpZ2dlcmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb25EZXN0cm95OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgc3RhdGU6ICd2b2lkJyB8ICdlbnRlcicgfCAnZXhpdCc7XG4gICAgZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIG1vZGFsUmVmOiBOek1vZGFsUmVmO1xuICAgIGlzU3RyaW5nQ29udGVudDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGVsZW1lbnRGb2N1c2VkQmVmb3JlTW9kYWxXYXNPcGVuZWQ7XG4gICAgcHJpdmF0ZSBmb2N1c1RyYXA7XG4gICAgcHJpdmF0ZSBsYXRlc3RNb3VzZWRvd25UYXJnZXQ7XG4gICAgcHJpdmF0ZSBvbGRNYXNrU3R5bGU7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIGdldCBzaG93TWFzaygpOiBib29sZWFuO1xuICAgIGdldCBtYXNrQ2xvc2FibGUoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBmb2N1c1RyYXBGYWN0b3J5OiBGb2N1c1RyYXBGYWN0b3J5LCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCByZW5kZXI6IFJlbmRlcmVyMiwgem9uZTogTmdab25lLCBvdmVybGF5UmVmOiBPdmVybGF5UmVmLCBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZSwgY29uZmlnOiBNb2RhbE9wdGlvbnMsIGRvY3VtZW50PzogTnpTYWZlQW55LCBhbmltYXRpb25UeXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkKTtcbiAgICBvbk1vdXNlZG93bihlOiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbk1vdXNldXAoZTogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgb25DbG9zZUNsaWNrKCk6IHZvaWQ7XG4gICAgb25Pa0NsaWNrKCk6IHZvaWQ7XG4gICAgYXR0YWNoQ29tcG9uZW50UG9ydGFsPFQ+KHBvcnRhbDogQ29tcG9uZW50UG9ydGFsPFQ+KTogQ29tcG9uZW50UmVmPFQ+O1xuICAgIGF0dGFjaFRlbXBsYXRlUG9ydGFsPEM+KHBvcnRhbDogVGVtcGxhdGVQb3J0YWw8Qz4pOiBFbWJlZGRlZFZpZXdSZWY8Qz47XG4gICAgZ2V0TmF0aXZlRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGFuaW1hdGlvbkRpc2FibGVkO1xuICAgIHByaXZhdGUgc2V0TW9kYWxUcmFuc2Zvcm1PcmlnaW47XG4gICAgcHJpdmF0ZSBzYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50O1xuICAgIHByaXZhdGUgdHJhcEZvY3VzO1xuICAgIHByaXZhdGUgcmVzdG9yZUZvY3VzO1xuICAgIHByaXZhdGUgc2V0RW50ZXJBbmltYXRpb25DbGFzcztcbiAgICBwcml2YXRlIHNldEV4aXRBbmltYXRpb25DbGFzcztcbiAgICBwcml2YXRlIGNsZWFuQW5pbWF0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBiaW5kQmFja2Ryb3BTdHlsZTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICAgICAqIEBkZXByZWNhdGVkIE5vdCBzdXBwb3J0ZWQuXG4gICAgICogQGJyZWFraW5nLWNoYW5nZSAxMC4wLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENvbnRhaW5lcjtcbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAgICogQGRlcHJlY2F0ZWQgTm90IHN1cHBvcnRlZC5cbiAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDEwLjAuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzZXRDb250YWluZXI7XG4gICAgcHJpdmF0ZSBnZXRDb250YWluZXI7XG4gICAgdXBkYXRlTWFza0NsYXNzbmFtZSgpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uRG9uZShldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBzdGFydEV4aXRBbmltYXRpb24oKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19