/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ContentObserver } from '@angular/cdk/observers';
import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { NzBadgeStatusType } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class NzBadgeComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    nzConfigService: NzConfigService;
    private renderer;
    private elementRef;
    private contentObserver;
    private cdr;
    private ngZone;
    static ngAcceptInputType_nzShowZero: BooleanInput;
    static ngAcceptInputType_nzShowDot: BooleanInput;
    static ngAcceptInputType_nzDot: BooleanInput;
    private destroy$;
    notWrapper: boolean;
    viewInit: boolean;
    maxNumberArray: string[];
    countArray: number[];
    countSingleArray: number[];
    presetColor: string | null;
    count: number;
    contentElement?: ElementRef;
    nzShowZero: boolean;
    nzShowDot: boolean;
    nzDot: boolean;
    nzOverflowCount: number;
    nzColor?: string;
    nzStyle: {
        [key: string]: string;
    } | null;
    nzText?: string;
    nzTitle?: string | null | undefined;
    nzStatus?: NzBadgeStatusType | string;
    nzCount?: number | TemplateRef<NzSafeAny>;
    nzOffset?: [number, number];
    checkContent(): void;
    get showSup(): boolean;
    generateMaxNumberArray(): void;
    constructor(nzConfigService: NzConfigService, renderer: Renderer2, elementRef: ElementRef, contentObserver: ContentObserver, cdr: ChangeDetectorRef, ngZone: NgZone);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzBadgeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzBadgeComponent, "nz-badge", ["nzBadge"], { "nzShowZero": "nzShowZero"; "nzShowDot": "nzShowDot"; "nzDot": "nzDot"; "nzOverflowCount": "nzOverflowCount"; "nzColor": "nzColor"; "nzStyle": "nzStyle"; "nzText": "nzText"; "nzTitle": "nzTitle"; "nzStatus": "nzStatus"; "nzCount": "nzCount"; "nzOffset": "nzOffset"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhZGdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENvbnRlbnRPYnNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL2NvbmZpZyc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBOekJhZGdlU3RhdHVzVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpCYWRnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgY29udGVudE9ic2VydmVyO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3daZXJvOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd0RvdDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekRvdDogQm9vbGVhbklucHV0O1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgbm90V3JhcHBlcjogYm9vbGVhbjtcbiAgICB2aWV3SW5pdDogYm9vbGVhbjtcbiAgICBtYXhOdW1iZXJBcnJheTogc3RyaW5nW107XG4gICAgY291bnRBcnJheTogbnVtYmVyW107XG4gICAgY291bnRTaW5nbGVBcnJheTogbnVtYmVyW107XG4gICAgcHJlc2V0Q29sb3I6IHN0cmluZyB8IG51bGw7XG4gICAgY291bnQ6IG51bWJlcjtcbiAgICBjb250ZW50RWxlbWVudD86IEVsZW1lbnRSZWY7XG4gICAgbnpTaG93WmVybzogYm9vbGVhbjtcbiAgICBuelNob3dEb3Q6IGJvb2xlYW47XG4gICAgbnpEb3Q6IGJvb2xlYW47XG4gICAgbnpPdmVyZmxvd0NvdW50OiBudW1iZXI7XG4gICAgbnpDb2xvcj86IHN0cmluZztcbiAgICBuelN0eWxlOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9IHwgbnVsbDtcbiAgICBuelRleHQ/OiBzdHJpbmc7XG4gICAgbnpUaXRsZT86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgbnpTdGF0dXM/OiBOekJhZGdlU3RhdHVzVHlwZSB8IHN0cmluZztcbiAgICBuekNvdW50PzogbnVtYmVyIHwgVGVtcGxhdGVSZWY8TnpTYWZlQW55PjtcbiAgICBuek9mZnNldD86IFtudW1iZXIsIG51bWJlcl07XG4gICAgY2hlY2tDb250ZW50KCk6IHZvaWQ7XG4gICAgZ2V0IHNob3dTdXAoKTogYm9vbGVhbjtcbiAgICBnZW5lcmF0ZU1heE51bWJlckFycmF5KCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IobnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNvbnRlbnRPYnNlcnZlcjogQ29udGVudE9ic2VydmVyLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19