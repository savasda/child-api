/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
/** code from https://github.com/angular/material2 */
import { Direction, Directionality } from '@angular/cdk/bidi';
import { Platform } from '@angular/cdk/platform';
import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { NzResizeService } from 'ng-zorro-antd/core/services';
import { BooleanInput, NzSizeLDSType } from 'ng-zorro-antd/core/types';
import { Subscription } from 'rxjs';
import { NzTabLabelDirective } from './tab-label.directive';
import { NzTabPosition, NzTabPositionMode } from './table.types';
import { NzTabsInkBarDirective } from './tabs-ink-bar.directive';
import * as ɵngcc0 from '@angular/core';
export declare type ScrollDirection = 'after' | 'before';
export declare class NzTabsNavComponent implements AfterContentChecked, AfterContentInit, OnDestroy {
    elementRef: ElementRef;
    private ngZone;
    private renderer;
    private cdr;
    private platform;
    private resizeService;
    private dir;
    static ngAcceptInputType_nzAnimated: BooleanInput;
    static ngAcceptInputType_nzHideBar: BooleanInput;
    static ngAcceptInputType_nzShowPagination: BooleanInput;
    private _tabPositionMode;
    private _scrollDistance;
    private _selectedIndex;
    /** Cached text content of the header. */
    private currentTextContent?;
    private destroy$;
    showPaginationControls: boolean;
    disableScrollAfter: boolean;
    disableScrollBefore: boolean;
    selectedIndexChanged: boolean;
    realignInkBar: Subscription | null;
    tabLabelCount?: number;
    scrollDistanceChanged?: boolean;
    listOfNzTabLabelDirective: QueryList<NzTabLabelDirective>;
    nzTabsInkBarDirective: NzTabsInkBarDirective;
    navContainerElement: ElementRef<HTMLDivElement>;
    navListElement: ElementRef<HTMLDivElement>;
    scrollListElement: ElementRef<HTMLDivElement>;
    readonly nzOnNextClick: EventEmitter<void>;
    readonly nzOnPrevClick: EventEmitter<void>;
    nzTabBarExtraContent?: TemplateRef<void>;
    nzAnimated: boolean;
    nzHideBar: boolean;
    nzShowPagination: boolean;
    nzType: string;
    nzSize?: NzSizeLDSType;
    nzTabPosition: NzTabPosition;
    set nzPositionMode(value: NzTabPositionMode);
    get nzPositionMode(): NzTabPositionMode;
    set selectedIndex(value: number);
    get selectedIndex(): number;
    constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef, platform: Platform, resizeService: NzResizeService, dir: Directionality);
    onContentChanges(): void;
    scrollHeader(scrollDir: ScrollDirection): void;
    ngAfterContentChecked(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    updateTabScrollPosition(): void;
    updatePagination(): void;
    checkPaginationEnabled(): void;
    scrollToLabel(labelIndex: number): void;
    checkScrollingControls(): void;
    /**
     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
     * is equal to the difference in width between the tab list container and tab header container.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    getMaxScrollDistance(): number;
    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
    set scrollDistance(v: number);
    get scrollDistance(): number;
    get viewWidthHeightPix(): number;
    get navContainerScrollPaddingPix(): number;
    get tabListScrollWidthHeightPix(): number;
    get tabListScrollOffSetWidthHeight(): number;
    getLayoutDirection(): Direction;
    alignInkBarToSelectedTab(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTabsNavComponent, [null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTabsNavComponent, "nz-tabs-nav", ["nzTabsNav"], { "nzAnimated": "nzAnimated"; "nzHideBar": "nzHideBar"; "nzShowPagination": "nzShowPagination"; "nzType": "nzType"; "nzTabPosition": "nzTabPosition"; "nzPositionMode": "nzPositionMode"; "selectedIndex": "selectedIndex"; "nzTabBarExtraContent": "nzTabBarExtraContent"; "nzSize": "nzSize"; }, { "nzOnNextClick": "nzOnNextClick"; "nzOnPrevClick": "nzOnPrevClick"; }, ["listOfNzTabLabelDirective"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy1uYXYuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYnMtbmF2LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbi8qKiBjb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyICovXG5pbXBvcnQgeyBEaXJlY3Rpb24sIERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpSZXNpemVTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3NlcnZpY2VzJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnpTaXplTERTVHlwZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56VGFiTGFiZWxEaXJlY3RpdmUgfSBmcm9tICcuL3RhYi1sYWJlbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnpUYWJQb3NpdGlvbiwgTnpUYWJQb3NpdGlvbk1vZGUgfSBmcm9tICcuL3RhYmxlLnR5cGVzJztcbmltcG9ydCB7IE56VGFic0lua0JhckRpcmVjdGl2ZSB9IGZyb20gJy4vdGFicy1pbmstYmFyLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFNjcm9sbERpcmVjdGlvbiA9ICdhZnRlcicgfCAnYmVmb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VGFic05hdkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgcHJpdmF0ZSByZXNpemVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGlyO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekFuaW1hdGVkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256SGlkZUJhcjogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dQYWdpbmF0aW9uOiBCb29sZWFuSW5wdXQ7XG4gICAgcHJpdmF0ZSBfdGFiUG9zaXRpb25Nb2RlO1xuICAgIHByaXZhdGUgX3Njcm9sbERpc3RhbmNlO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkSW5kZXg7XG4gICAgLyoqIENhY2hlZCB0ZXh0IGNvbnRlbnQgb2YgdGhlIGhlYWRlci4gKi9cbiAgICBwcml2YXRlIGN1cnJlbnRUZXh0Q29udGVudD87XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBzaG93UGFnaW5hdGlvbkNvbnRyb2xzOiBib29sZWFuO1xuICAgIGRpc2FibGVTY3JvbGxBZnRlcjogYm9vbGVhbjtcbiAgICBkaXNhYmxlU2Nyb2xsQmVmb3JlOiBib29sZWFuO1xuICAgIHNlbGVjdGVkSW5kZXhDaGFuZ2VkOiBib29sZWFuO1xuICAgIHJlYWxpZ25JbmtCYXI6IFN1YnNjcmlwdGlvbiB8IG51bGw7XG4gICAgdGFiTGFiZWxDb3VudD86IG51bWJlcjtcbiAgICBzY3JvbGxEaXN0YW5jZUNoYW5nZWQ/OiBib29sZWFuO1xuICAgIGxpc3RPZk56VGFiTGFiZWxEaXJlY3RpdmU6IFF1ZXJ5TGlzdDxOelRhYkxhYmVsRGlyZWN0aXZlPjtcbiAgICBuelRhYnNJbmtCYXJEaXJlY3RpdmU6IE56VGFic0lua0JhckRpcmVjdGl2ZTtcbiAgICBuYXZDb250YWluZXJFbGVtZW50OiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICBuYXZMaXN0RWxlbWVudDogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG4gICAgc2Nyb2xsTGlzdEVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICAgIHJlYWRvbmx5IG56T25OZXh0Q2xpY2s6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSBuek9uUHJldkNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgbnpUYWJCYXJFeHRyYUNvbnRlbnQ/OiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBuekFuaW1hdGVkOiBib29sZWFuO1xuICAgIG56SGlkZUJhcjogYm9vbGVhbjtcbiAgICBuelNob3dQYWdpbmF0aW9uOiBib29sZWFuO1xuICAgIG56VHlwZTogc3RyaW5nO1xuICAgIG56U2l6ZT86IE56U2l6ZUxEU1R5cGU7XG4gICAgbnpUYWJQb3NpdGlvbjogTnpUYWJQb3NpdGlvbjtcbiAgICBzZXQgbnpQb3NpdGlvbk1vZGUodmFsdWU6IE56VGFiUG9zaXRpb25Nb2RlKTtcbiAgICBnZXQgbnpQb3NpdGlvbk1vZGUoKTogTnpUYWJQb3NpdGlvbk1vZGU7XG4gICAgc2V0IHNlbGVjdGVkSW5kZXgodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHNlbGVjdGVkSW5kZXgoKTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwbGF0Zm9ybTogUGxhdGZvcm0sIHJlc2l6ZVNlcnZpY2U6IE56UmVzaXplU2VydmljZSwgZGlyOiBEaXJlY3Rpb25hbGl0eSk7XG4gICAgb25Db250ZW50Q2hhbmdlcygpOiB2b2lkO1xuICAgIHNjcm9sbEhlYWRlcihzY3JvbGxEaXI6IFNjcm9sbERpcmVjdGlvbik6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB1cGRhdGVUYWJTY3JvbGxQb3NpdGlvbigpOiB2b2lkO1xuICAgIHVwZGF0ZVBhZ2luYXRpb24oKTogdm9pZDtcbiAgICBjaGVja1BhZ2luYXRpb25FbmFibGVkKCk6IHZvaWQ7XG4gICAgc2Nyb2xsVG9MYWJlbChsYWJlbEluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGNoZWNrU2Nyb2xsaW5nQ29udHJvbHMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgaXMgdGhlIG1heGltdW0gbGVuZ3RoIGluIHBpeGVscyB0aGF0IGNhbiBiZSBzZXQgZm9yIHRoZSBzY3JvbGwgZGlzdGFuY2UuIFRoaXNcbiAgICAgKiBpcyBlcXVhbCB0byB0aGUgZGlmZmVyZW5jZSBpbiB3aWR0aCBiZXR3ZWVuIHRoZSB0YWIgbGlzdCBjb250YWluZXIgYW5kIHRhYiBoZWFkZXIgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBleHBlbnNpdmUgY2FsbCB0aGF0IGZvcmNlcyBhIGxheW91dCByZWZsb3cgdG8gY29tcHV0ZSBib3ggYW5kIHNjcm9sbCBtZXRyaWNzIGFuZFxuICAgICAqIHNob3VsZCBiZSBjYWxsZWQgc3BhcmluZ2x5LlxuICAgICAqL1xuICAgIGdldE1heFNjcm9sbERpc3RhbmNlKCk6IG51bWJlcjtcbiAgICAvKiogU2V0cyB0aGUgZGlzdGFuY2UgaW4gcGl4ZWxzIHRoYXQgdGhlIHRhYiBoZWFkZXIgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIGluIHRoZSBYLWF4aXMuICovXG4gICAgc2V0IHNjcm9sbERpc3RhbmNlKHY6IG51bWJlcik7XG4gICAgZ2V0IHNjcm9sbERpc3RhbmNlKCk6IG51bWJlcjtcbiAgICBnZXQgdmlld1dpZHRoSGVpZ2h0UGl4KCk6IG51bWJlcjtcbiAgICBnZXQgbmF2Q29udGFpbmVyU2Nyb2xsUGFkZGluZ1BpeCgpOiBudW1iZXI7XG4gICAgZ2V0IHRhYkxpc3RTY3JvbGxXaWR0aEhlaWdodFBpeCgpOiBudW1iZXI7XG4gICAgZ2V0IHRhYkxpc3RTY3JvbGxPZmZTZXRXaWR0aEhlaWdodCgpOiBudW1iZXI7XG4gICAgZ2V0TGF5b3V0RGlyZWN0aW9uKCk6IERpcmVjdGlvbjtcbiAgICBhbGlnbklua0JhclRvU2VsZWN0ZWRUYWIoKTogdm9pZDtcbn1cbiJdfQ==