/**
 * @fileoverview added by tsickle
 * Generated from: base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ComponentPortal } from '@angular/cdk/portal';
import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
/** @type {?} */
let globalCounter = 0;
/**
 * @abstract
 */
export class NzMNService {
    /**
     * @param {?} nzSingletonService
     * @param {?} overlay
     * @param {?} injector
     */
    constructor(nzSingletonService, overlay, injector) {
        this.nzSingletonService = nzSingletonService;
        this.overlay = overlay;
        this.injector = injector;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    remove(id) {
        if (this.container) {
            if (id) {
                this.container.remove(id);
            }
            else {
                this.container.removeAll();
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getInstanceId() {
        return `${this.componentPrefix}-${globalCounter++}`;
    }
    /**
     * @protected
     * @template T
     * @param {?} ctor
     * @return {?}
     */
    withContainer(ctor) {
        /** @type {?} */
        let containerInstance = this.nzSingletonService.getSingletonWithKey(this.componentPrefix);
        if (containerInstance) {
            return (/** @type {?} */ (containerInstance));
        }
        /** @type {?} */
        const overlayRef = this.overlay.create({
            hasBackdrop: false,
            scrollStrategy: this.overlay.scrollStrategies.noop(),
            positionStrategy: this.overlay.position().global()
        });
        /** @type {?} */
        const componentPortal = new ComponentPortal(ctor, null, this.injector);
        /** @type {?} */
        const componentRef = overlayRef.attach(componentPortal);
        /** @type {?} */
        const overlayPane = overlayRef.overlayElement;
        overlayPane.style.zIndex = '1010';
        if (!containerInstance) {
            this.container = containerInstance = componentRef.instance;
            this.nzSingletonService.registerSingletonWithKey(this.componentPrefix, containerInstance);
        }
        return (/** @type {?} */ (containerInstance));
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.componentPrefix;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.container;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.nzSingletonService;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.overlay;
    /**
     * @type {?}
     * @private
     */
    NzMNService.prototype.injector;
}
/**
 * @abstract
 */
export class NzMNContainerComponent {
    /**
     * @param {?} cdr
     * @param {?} nzConfigService
     */
    constructor(cdr, nzConfigService) {
        this.cdr = cdr;
        this.nzConfigService = nzConfigService;
        this.instances = [];
        this.destroy$ = new Subject();
        this.updateConfig();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscribeConfigChange();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    create(data) {
        /** @type {?} */
        const instance = this.onCreate(data);
        if (this.instances.length >= (/** @type {?} */ (this.config)).nzMaxStack) {
            this.instances = this.instances.slice(1);
        }
        this.instances = [...this.instances, instance];
        this.readyInstances();
        return instance;
    }
    /**
     * @param {?} id
     * @param {?=} userAction
     * @return {?}
     */
    remove(id, userAction = false) {
        this.instances.some((/**
         * @param {?} instance
         * @param {?} index
         * @return {?}
         */
        (instance, index) => {
            if (instance.messageId === id) {
                this.instances.splice(index, 1);
                this.instances = [...this.instances];
                this.onRemove(instance, userAction);
                this.readyInstances();
                return true;
            }
            return false;
        }));
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.instances.forEach((/**
         * @param {?} i
         * @return {?}
         */
        i => this.onRemove(i, false)));
        this.instances = [];
        this.readyInstances();
    }
    /**
     * @protected
     * @param {?} instance
     * @return {?}
     */
    onCreate(instance) {
        instance.options = this.mergeOptions(instance.options);
        instance.onClose = new Subject();
        return (/** @type {?} */ (instance));
    }
    /**
     * @protected
     * @param {?} instance
     * @param {?} userAction
     * @return {?}
     */
    onRemove(instance, userAction) {
        instance.onClose.next(userAction);
        instance.onClose.complete();
    }
    /**
     * @protected
     * @return {?}
     */
    readyInstances() {
        this.cdr.detectChanges();
    }
    /**
     * @protected
     * @param {?=} options
     * @return {?}
     */
    mergeOptions(options) {
        const { nzDuration, nzAnimate, nzPauseOnHover } = (/** @type {?} */ (this.config));
        return Object.assign({ nzDuration, nzAnimate, nzPauseOnHover }, options);
    }
}
if (false) {
    /** @type {?} */
    NzMNContainerComponent.prototype.config;
    /** @type {?} */
    NzMNContainerComponent.prototype.instances;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.nzConfigService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    NzMNContainerComponent.prototype.updateConfig = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    NzMNContainerComponent.prototype.subscribeConfigChange = function () { };
}
/**
 * @abstract
 */
export class NzMNComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.destroyed = new EventEmitter();
        this.eraseTimer = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = (/** @type {?} */ (this.instance.options));
        if (this.options.nzAnimate) {
            this.instance.state = 'enter';
        }
        this.autoClose = this.options.nzDuration > 0;
        if (this.autoClose) {
            this.initErase();
            this.startEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.autoClose) {
            this.clearEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    onEnter() {
        if (this.autoClose && this.options.nzPauseOnHover) {
            this.clearEraseTimeout();
            this.updateTTL();
        }
    }
    /**
     * @return {?}
     */
    onLeave() {
        if (this.autoClose && this.options.nzPauseOnHover) {
            this.startEraseTimeout();
        }
    }
    /**
     * @protected
     * @param {?=} userAction
     * @return {?}
     */
    destroy(userAction = false) {
        if (this.options.nzAnimate) {
            this.instance.state = 'leave';
            this.cdr.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.destroyed.next({ id: this.instance.messageId, userAction: userAction });
            }), 200);
        }
        else {
            this.destroyed.next({ id: this.instance.messageId, userAction: userAction });
        }
    }
    /**
     * @private
     * @return {?}
     */
    initErase() {
        this.eraseTTL = this.options.nzDuration;
        this.eraseTimingStart = Date.now();
    }
    /**
     * @private
     * @return {?}
     */
    updateTTL() {
        if (this.autoClose) {
            this.eraseTTL -= Date.now() - (/** @type {?} */ (this.eraseTimingStart));
        }
    }
    /**
     * @private
     * @return {?}
     */
    startEraseTimeout() {
        if (this.eraseTTL > 0) {
            this.clearEraseTimeout();
            this.eraseTimer = setTimeout((/**
             * @return {?}
             */
            () => this.destroy()), this.eraseTTL);
            this.eraseTimingStart = Date.now();
        }
        else {
            this.destroy();
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearEraseTimeout() {
        if (this.eraseTimer !== null) {
            clearTimeout(this.eraseTimer);
            this.eraseTimer = null;
        }
    }
}
if (false) {
    /** @type {?} */
    NzMNComponent.prototype.instance;
    /** @type {?} */
    NzMNComponent.prototype.index;
    /** @type {?} */
    NzMNComponent.prototype.destroyed;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.options;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.autoClose;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTimer;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTimingStart;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTTL;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,