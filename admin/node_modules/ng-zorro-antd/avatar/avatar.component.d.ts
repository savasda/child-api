/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NgClassInterface, NgStyleInterface, NzShapeSCType, NzSizeLDSType } from 'ng-zorro-antd/core/types';
import * as ɵngcc0 from '@angular/core';
export declare class NzAvatarComponent implements OnChanges {
    nzConfigService: NzConfigService;
    private elementRef;
    private cdr;
    private platform;
    nzShape: NzShapeSCType;
    nzSize: NzSizeLDSType | number;
    nzText?: string;
    nzSrc?: string;
    nzSrcSet?: string;
    nzAlt?: string;
    nzIcon?: string;
    readonly nzError: EventEmitter<Event>;
    hasText: boolean;
    hasSrc: boolean;
    hasIcon: boolean;
    textStyles: NgStyleInterface;
    classMap: NgClassInterface;
    customSize: string | null;
    textEl?: ElementRef;
    private el;
    constructor(nzConfigService: NzConfigService, elementRef: ElementRef, cdr: ChangeDetectorRef, platform: Platform);
    imgError($event: Event): void;
    ngOnChanges(): void;
    private calcStringSize;
    private notifyCalc;
    private setSizeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzAvatarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzAvatarComponent, "nz-avatar", ["nzAvatar"], { "nzShape": "nzShape"; "nzSize": "nzSize"; "nzText": "nzText"; "nzSrc": "nzSrc"; "nzSrcSet": "nzSrcSet"; "nzAlt": "nzAlt"; "nzIcon": "nzIcon"; }, { "nzError": "nzError"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmF0YXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgTmdDbGFzc0ludGVyZmFjZSwgTmdTdHlsZUludGVyZmFjZSwgTnpTaGFwZVNDVHlwZSwgTnpTaXplTERTVHlwZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOekF2YXRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgbnpTaGFwZTogTnpTaGFwZVNDVHlwZTtcbiAgICBuelNpemU6IE56U2l6ZUxEU1R5cGUgfCBudW1iZXI7XG4gICAgbnpUZXh0Pzogc3RyaW5nO1xuICAgIG56U3JjPzogc3RyaW5nO1xuICAgIG56U3JjU2V0Pzogc3RyaW5nO1xuICAgIG56QWx0Pzogc3RyaW5nO1xuICAgIG56SWNvbj86IHN0cmluZztcbiAgICByZWFkb25seSBuekVycm9yOiBFdmVudEVtaXR0ZXI8RXZlbnQ+O1xuICAgIGhhc1RleHQ6IGJvb2xlYW47XG4gICAgaGFzU3JjOiBib29sZWFuO1xuICAgIGhhc0ljb246IGJvb2xlYW47XG4gICAgdGV4dFN0eWxlczogTmdTdHlsZUludGVyZmFjZTtcbiAgICBjbGFzc01hcDogTmdDbGFzc0ludGVyZmFjZTtcbiAgICBjdXN0b21TaXplOiBzdHJpbmcgfCBudWxsO1xuICAgIHRleHRFbD86IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBjb25zdHJ1Y3RvcihuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBpbWdFcnJvcigkZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIHByaXZhdGUgY2FsY1N0cmluZ1NpemU7XG4gICAgcHJpdmF0ZSBub3RpZnlDYWxjO1xuICAgIHByaXZhdGUgc2V0U2l6ZVN0eWxlO1xufVxuIl19