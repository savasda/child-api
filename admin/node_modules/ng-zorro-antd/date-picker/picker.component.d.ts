/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { CandyDate, CompatibleValue } from 'ng-zorro-antd/core/time';
import { NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';
import { DateHelperService } from 'ng-zorro-antd/i18n';
import { Subject } from 'rxjs';
import { DatePickerService } from './date-picker.service';
import { DateRangePopupComponent } from './date-range-popup.component';
import { RangePartType } from './standard-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzPickerComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private elementRef;
    private dateHelper;
    private changeDetector;
    datePickerService: DatePickerService;
    noAnimation: boolean;
    isRange: boolean;
    open: boolean | undefined;
    disabled: boolean;
    placeholder: string | string[];
    allowClear?: boolean;
    autoFocus?: boolean;
    format: string;
    separator?: string;
    popupStyle: NgStyleInterface | null;
    dropdownClassName?: string;
    suffixIcon?: string | TemplateRef<NzSafeAny>;
    readonly focusChange: EventEmitter<boolean>;
    readonly valueChange: EventEmitter<CandyDate | CandyDate[] | null>;
    readonly openChange: EventEmitter<boolean>;
    cdkConnectedOverlay?: CdkConnectedOverlay;
    separatorElement?: ElementRef;
    pickerInput?: ElementRef<HTMLInputElement>;
    rangePickerInputs: QueryList<ElementRef<HTMLInputElement>>;
    panel: DateRangePopupComponent;
    origin: CdkOverlayOrigin;
    document: Document;
    inputSize?: number;
    inputWidth?: number;
    arrowLeft?: number;
    destroy$: Subject<unknown>;
    prefixCls: string;
    inputValue: NzSafeAny;
    activeBarStyle: object;
    animationOpenState: boolean;
    overlayOpen: boolean;
    overlayPositions: ConnectionPositionPair[];
    currentPositionX: HorizontalConnectionPos;
    currentPositionY: VerticalConnectionPos;
    get realOpenState(): boolean;
    constructor(elementRef: ElementRef, dateHelper: DateHelperService, changeDetector: ChangeDetectorRef, datePickerService: DatePickerService, doc: NzSafeAny);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    resetInputWidthAndArrowLeft(): void;
    getInput(partType?: RangePartType): HTMLInputElement;
    focus(): void;
    onFocus(partType?: RangePartType): void;
    onBlur(): void;
    showOverlay(): void;
    hideOverlay(): void;
    showClear(): boolean;
    onClickInputBox(event: MouseEvent, partType?: RangePartType): void;
    onClickBackdrop(): void;
    onOverlayDetach(): void;
    onOverlayKeydown(event: KeyboardEvent): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    onClickClear(event: MouseEvent): void;
    updateInputValue(): void;
    formatValue(value: CandyDate): string;
    onInputKeyup(event: Event, isEnter?: boolean): void;
    private checkValidInputDate;
    getPlaceholder(partType?: RangePartType): string;
    isEmptyValue(value: CompatibleValue): boolean;
    isOpenHandledByUser(): boolean;
    animationStart(): void;
    animationDone(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzPickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzPickerComponent, "[nz-picker]", ["nzPicker"], { "noAnimation": "noAnimation"; "isRange": "isRange"; "open": "open"; "disabled": "disabled"; "popupStyle": "popupStyle"; "placeholder": "placeholder"; "allowClear": "allowClear"; "autoFocus": "autoFocus"; "format": "format"; "separator": "separator"; "dropdownClassName": "dropdownClassName"; "suffixIcon": "suffixIcon"; }, { "focusChange": "focusChange"; "valueChange": "valueChange"; "openChange": "openChange"; }, ["panel"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwaWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENka0Nvbm5lY3RlZE92ZXJsYXksIENka092ZXJsYXlPcmlnaW4sIENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciwgSG9yaXpvbnRhbENvbm5lY3Rpb25Qb3MsIFZlcnRpY2FsQ29ubmVjdGlvblBvcyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbmR5RGF0ZSwgQ29tcGF0aWJsZVZhbHVlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3RpbWUnO1xuaW1wb3J0IHsgTmdTdHlsZUludGVyZmFjZSwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IERhdGVIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGVQaWNrZXJTZXJ2aWNlIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVSYW5nZVBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBvcHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSYW5nZVBhcnRUeXBlIH0gZnJvbSAnLi9zdGFuZGFyZC10eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGRhdGVIZWxwZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBkYXRlUGlja2VyU2VydmljZTogRGF0ZVBpY2tlclNlcnZpY2U7XG4gICAgbm9BbmltYXRpb246IGJvb2xlYW47XG4gICAgaXNSYW5nZTogYm9vbGVhbjtcbiAgICBvcGVuOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBhbGxvd0NsZWFyPzogYm9vbGVhbjtcbiAgICBhdXRvRm9jdXM/OiBib29sZWFuO1xuICAgIGZvcm1hdDogc3RyaW5nO1xuICAgIHNlcGFyYXRvcj86IHN0cmluZztcbiAgICBwb3B1cFN0eWxlOiBOZ1N0eWxlSW50ZXJmYWNlIHwgbnVsbDtcbiAgICBkcm9wZG93bkNsYXNzTmFtZT86IHN0cmluZztcbiAgICBzdWZmaXhJY29uPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8TnpTYWZlQW55PjtcbiAgICByZWFkb25seSBmb2N1c0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHJlYWRvbmx5IHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlIHwgQ2FuZHlEYXRlW10gfCBudWxsPjtcbiAgICByZWFkb25seSBvcGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgY2RrQ29ubmVjdGVkT3ZlcmxheT86IENka0Nvbm5lY3RlZE92ZXJsYXk7XG4gICAgc2VwYXJhdG9yRWxlbWVudD86IEVsZW1lbnRSZWY7XG4gICAgcGlja2VySW5wdXQ/OiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAgIHJhbmdlUGlja2VySW5wdXRzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50Pj47XG4gICAgcGFuZWw6IERhdGVSYW5nZVBvcHVwQ29tcG9uZW50O1xuICAgIG9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbjtcbiAgICBkb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgaW5wdXRTaXplPzogbnVtYmVyO1xuICAgIGlucHV0V2lkdGg/OiBudW1iZXI7XG4gICAgYXJyb3dMZWZ0PzogbnVtYmVyO1xuICAgIGRlc3Ryb3kkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIHByZWZpeENsczogc3RyaW5nO1xuICAgIGlucHV0VmFsdWU6IE56U2FmZUFueTtcbiAgICBhY3RpdmVCYXJTdHlsZTogb2JqZWN0O1xuICAgIGFuaW1hdGlvbk9wZW5TdGF0ZTogYm9vbGVhbjtcbiAgICBvdmVybGF5T3BlbjogYm9vbGVhbjtcbiAgICBvdmVybGF5UG9zaXRpb25zOiBDb25uZWN0aW9uUG9zaXRpb25QYWlyW107XG4gICAgY3VycmVudFBvc2l0aW9uWDogSG9yaXpvbnRhbENvbm5lY3Rpb25Qb3M7XG4gICAgY3VycmVudFBvc2l0aW9uWTogVmVydGljYWxDb25uZWN0aW9uUG9zO1xuICAgIGdldCByZWFsT3BlblN0YXRlKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZGF0ZUhlbHBlcjogRGF0ZUhlbHBlclNlcnZpY2UsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGF0ZVBpY2tlclNlcnZpY2U6IERhdGVQaWNrZXJTZXJ2aWNlLCBkb2M6IE56U2FmZUFueSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHJlc2V0SW5wdXRXaWR0aEFuZEFycm93TGVmdCgpOiB2b2lkO1xuICAgIGdldElucHV0KHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBvbkZvY3VzKHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgc2hvd092ZXJsYXkoKTogdm9pZDtcbiAgICBoaWRlT3ZlcmxheSgpOiB2b2lkO1xuICAgIHNob3dDbGVhcigpOiBib29sZWFuO1xuICAgIG9uQ2xpY2tJbnB1dEJveChldmVudDogTW91c2VFdmVudCwgcGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogdm9pZDtcbiAgICBvbkNsaWNrQmFja2Ryb3AoKTogdm9pZDtcbiAgICBvbk92ZXJsYXlEZXRhY2goKTogdm9pZDtcbiAgICBvbk92ZXJsYXlLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvblBvc2l0aW9uQ2hhbmdlKHBvc2l0aW9uOiBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UpOiB2b2lkO1xuICAgIG9uQ2xpY2tDbGVhcihldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgdXBkYXRlSW5wdXRWYWx1ZSgpOiB2b2lkO1xuICAgIGZvcm1hdFZhbHVlKHZhbHVlOiBDYW5keURhdGUpOiBzdHJpbmc7XG4gICAgb25JbnB1dEtleXVwKGV2ZW50OiBFdmVudCwgaXNFbnRlcj86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByaXZhdGUgY2hlY2tWYWxpZElucHV0RGF0ZTtcbiAgICBnZXRQbGFjZWhvbGRlcihwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiBzdHJpbmc7XG4gICAgaXNFbXB0eVZhbHVlKHZhbHVlOiBDb21wYXRpYmxlVmFsdWUpOiBib29sZWFuO1xuICAgIGlzT3BlbkhhbmRsZWRCeVVzZXIoKTogYm9vbGVhbjtcbiAgICBhbmltYXRpb25TdGFydCgpOiB2b2lkO1xuICAgIGFuaW1hdGlvbkRvbmUoKTogdm9pZDtcbn1cbiJdfQ==