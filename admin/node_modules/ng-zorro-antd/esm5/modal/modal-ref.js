/**
 * @fileoverview added by tsickle
 * Generated from: modal-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
import { EventEmitter } from '@angular/core';
import { isPromise } from 'ng-zorro-antd/core/util';
import { merge, Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
/** @enum {number} */
var NzModalState = {
    OPEN: 0,
    CLOSING: 1,
    CLOSED: 2,
};
export { NzModalState };
/** @enum {string} */
var NzTriggerAction = {
    CANCEL: "cancel",
    OK: "ok",
};
export { NzTriggerAction };
/**
 * @template T, R
 */
var /**
 * @template T, R
 */
NzModalRef = /** @class */ (function () {
    function NzModalRef(overlayRef, config, containerInstance) {
        var _this = this;
        this.overlayRef = overlayRef;
        this.config = config;
        this.containerInstance = containerInstance;
        this.componentInstance = null;
        this.state = 0 /* OPEN */;
        this.afterClose = new Subject();
        this.afterOpen = new Subject();
        containerInstance.animationStateChanged
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.phaseName === 'done' && event.toState === 'enter'; })), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.afterOpen.next();
            _this.afterOpen.complete();
            if (config.nzAfterOpen instanceof EventEmitter) {
                config.nzAfterOpen.emit();
            }
        }));
        merge(containerInstance.onDestroy, containerInstance.animationStateChanged.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.phaseName === 'done' && event.toState === 'exit'; })), take(1)))
            .pipe(take(1))
            .subscribe((/**
         * @return {?}
         */
        function () {
            clearTimeout(_this.closeTimeout);
            _this.finishDialogClose();
        }));
        containerInstance.containerClick.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var cancelable = !_this.config.nzCancelLoading && !_this.config.nzOkLoading;
            if (cancelable) {
                _this.trigger("cancel" /* CANCEL */);
            }
        }));
        overlayRef
            .keydownEvents()
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return (((/** @type {?} */ (_this.config.nzKeyboard))) &&
                !_this.config.nzCancelLoading &&
                !_this.config.nzOkLoading &&
                event.keyCode === ESCAPE &&
                !hasModifierKey(event));
        })))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            _this.trigger("cancel" /* CANCEL */);
        }));
        containerInstance.cancelTriggered.subscribe((/**
         * @return {?}
         */
        function () { return _this.trigger("cancel" /* CANCEL */); }));
        containerInstance.okTriggered.subscribe((/**
         * @return {?}
         */
        function () { return _this.trigger("ok" /* OK */); }));
        overlayRef.detachments().subscribe((/**
         * @return {?}
         */
        function () {
            _this.afterClose.next(_this.result);
            _this.afterClose.complete();
            if (config.nzAfterClose instanceof EventEmitter) {
                config.nzAfterClose.emit(_this.result);
            }
            _this.componentInstance = null;
            _this.overlayRef.dispose();
        }));
    }
    /**
     * @return {?}
     */
    NzModalRef.prototype.getContentComponent = /**
     * @return {?}
     */
    function () {
        return (/** @type {?} */ (this.componentInstance));
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return this.containerInstance.getNativeElement();
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    NzModalRef.prototype.destroy = /**
     * @param {?=} result
     * @return {?}
     */
    function (result) {
        this.close(result);
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.triggerOk = /**
     * @return {?}
     */
    function () {
        this.trigger("ok" /* OK */);
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.triggerCancel = /**
     * @return {?}
     */
    function () {
        this.trigger("cancel" /* CANCEL */);
    };
    /**
     * Open the modal.
     * @deprecated Opened when create, this method is useless.
     * @breaking-change 10.0.0
     */
    /**
     * Open the modal.
     * @deprecated Opened when create, this method is useless.
     * \@breaking-change 10.0.0
     * @return {?}
     */
    NzModalRef.prototype.open = /**
     * Open the modal.
     * @deprecated Opened when create, this method is useless.
     * \@breaking-change 10.0.0
     * @return {?}
     */
    function () {
        // noop
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    NzModalRef.prototype.close = /**
     * @param {?=} result
     * @return {?}
     */
    function (result) {
        var _this = this;
        this.result = result;
        this.containerInstance.animationStateChanged
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.phaseName === 'start'; })), take(1))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.overlayRef.detachBackdrop();
            _this.closeTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.finishDialogClose();
            }), event.totalTime + 100);
        }));
        this.containerInstance.startExitAnimation();
        this.state = 1 /* CLOSING */;
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NzModalRef.prototype.updateConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        Object.assign(this.config, config);
        this.containerInstance.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.getState = /**
     * @return {?}
     */
    function () {
        return this.state;
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this.config;
    };
    /**
     * @return {?}
     */
    NzModalRef.prototype.getBackdropElement = /**
     * @return {?}
     */
    function () {
        return this.overlayRef.backdropElement;
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    NzModalRef.prototype.trigger = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        /** @type {?} */
        var trigger = { ok: this.config.nzOnOk, cancel: this.config.nzOnCancel }[action];
        /** @type {?} */
        var loadingKey = (/** @type {?} */ ({ ok: 'nzOkLoading', cancel: 'nzCancelLoading' }[action]));
        /** @type {?} */
        var loading = this.config[loadingKey];
        if (loading) {
            return;
        }
        if (trigger instanceof EventEmitter) {
            trigger.emit(this.getContentComponent());
        }
        else if (typeof trigger === 'function') {
            /** @type {?} */
            var result = trigger(this.getContentComponent());
            /** @type {?} */
            var caseClose = (/**
             * @param {?} doClose
             * @return {?}
             */
            function (doClose) { return doClose !== false && _this.close((/** @type {?} */ (doClose))); });
            if (isPromise(result)) {
                this.config[loadingKey] = true;
                /** @type {?} */
                var handleThen = (/**
                 * @param {?} doClose
                 * @return {?}
                 */
                function (doClose) {
                    _this.config[loadingKey] = false;
                    _this.closeWhitResult(doClose);
                });
                result.then(handleThen).catch(handleThen);
            }
            else {
                caseClose(result);
            }
        }
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    NzModalRef.prototype.closeWhitResult = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        if (result !== false) {
            this.close(result);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NzModalRef.prototype.finishDialogClose = /**
     * @private
     * @return {?}
     */
    function () {
        this.state = 2 /* CLOSED */;
        this.overlayRef.dispose();
    };
    return NzModalRef;
}());
/**
 * @template T, R
 */
export { NzModalRef };
if (false) {
    /** @type {?} */
    NzModalRef.prototype.componentInstance;
    /** @type {?} */
    NzModalRef.prototype.result;
    /** @type {?} */
    NzModalRef.prototype.state;
    /** @type {?} */
    NzModalRef.prototype.afterClose;
    /** @type {?} */
    NzModalRef.prototype.afterOpen;
    /**
     * @type {?}
     * @private
     */
    NzModalRef.prototype.closeTimeout;
    /**
     * @type {?}
     * @private
     */
    NzModalRef.prototype.overlayRef;
    /**
     * @type {?}
     * @private
     */
    NzModalRef.prototype.config;
    /** @type {?} */
    NzModalRef.prototype.containerInstance;
}
//# sourceMappingURL=data:application/json;base64,