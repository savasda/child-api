/**
 * @fileoverview added by tsickle
 * Generated from: modal-container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __extends } from "tslib";
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { BasePortalOutlet } from '@angular/cdk/portal';
import { EventEmitter } from '@angular/core';
import { getElementOffset } from 'ng-zorro-antd/core/util';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { FADE_CLASS_NAME_MAP, MODAL_MASK_CLASS_NAME, NZ_CONFIG_COMPONENT_NAME, ZOOM_CLASS_NAME_MAP } from './modal-config';
import { getValueWithConfig } from './utils';
/**
 * @return {?}
 */
export function throwNzModalContentAlreadyAttachedError() {
    throw Error('Attempting to attach modal content after content is already attached');
}
var BaseModalContainer = /** @class */ (function (_super) {
    __extends(BaseModalContainer, _super);
    function BaseModalContainer(elementRef, focusTrapFactory, cdr, render, zone, overlayRef, nzConfigService, config, document, animationType) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.focusTrapFactory = focusTrapFactory;
        _this.cdr = cdr;
        _this.render = render;
        _this.zone = zone;
        _this.overlayRef = overlayRef;
        _this.nzConfigService = nzConfigService;
        _this.config = config;
        _this.animationType = animationType;
        _this.animationStateChanged = new EventEmitter();
        _this.containerClick = new EventEmitter();
        _this.cancelTriggered = new EventEmitter();
        _this.okTriggered = new EventEmitter();
        _this.onDestroy = new EventEmitter();
        _this.state = 'enter';
        _this.isStringContent = false;
        _this.elementFocusedBeforeModalWasOpened = null;
        _this.latestMousedownTarget = null;
        _this.oldMaskStyle = null;
        _this.destroy$ = new Subject();
        _this.document = document;
        _this.isStringContent = typeof config.nzContent === 'string';
        _this.setContainer();
        _this.nzConfigService
            .getConfigChangeEventForComponent(NZ_CONFIG_COMPONENT_NAME)
            .pipe(takeUntil(_this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateMaskClassname();
        }));
        return _this;
    }
    Object.defineProperty(BaseModalContainer.prototype, "showMask", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var defaultConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_COMPONENT_NAME) || {};
            return !!getValueWithConfig(this.config.nzMask, defaultConfig.nzMask, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseModalContainer.prototype, "maskClosable", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var defaultConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_COMPONENT_NAME) || {};
            return !!getValueWithConfig(this.config.nzMaskClosable, defaultConfig.nzMaskClosable, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    BaseModalContainer.prototype.onMousedown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.latestMousedownTarget = ((/** @type {?} */ (e.target))) || null;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    BaseModalContainer.prototype.onMouseup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.target === this.latestMousedownTarget && e.target === this.elementRef.nativeElement && this.showMask && this.maskClosable) {
            this.containerClick.emit();
        }
        this.latestMousedownTarget = null;
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.cancelTriggered.emit();
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.onOkClick = /**
     * @return {?}
     */
    function () {
        this.okTriggered.emit();
    };
    /**
     * @template T
     * @param {?} portal
     * @return {?}
     */
    BaseModalContainer.prototype.attachComponentPortal = /**
     * @template T
     * @param {?} portal
     * @return {?}
     */
    function (portal) {
        if (this.portalOutlet.hasAttached()) {
            throwNzModalContentAlreadyAttachedError();
        }
        this.savePreviouslyFocusedElement();
        this.setModalTransformOrigin();
        return this.portalOutlet.attachComponentPortal(portal);
    };
    /**
     * @template C
     * @param {?} portal
     * @return {?}
     */
    BaseModalContainer.prototype.attachTemplatePortal = /**
     * @template C
     * @param {?} portal
     * @return {?}
     */
    function (portal) {
        if (this.portalOutlet.hasAttached()) {
            throwNzModalContentAlreadyAttachedError();
        }
        this.savePreviouslyFocusedElement();
        return this.portalOutlet.attachTemplatePortal(portal);
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.getNativeElement = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.animationDisabled = /**
     * @private
     * @return {?}
     */
    function () {
        return this.config.nzNoAnimation || this.animationType === 'NoopAnimations';
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.setModalTransformOrigin = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var modalElement = this.modalElementRef.nativeElement;
        if ((/** @type {?} */ (this.elementFocusedBeforeModalWasOpened))) {
            /** @type {?} */
            var previouslyDOMRect = (/** @type {?} */ (this.elementFocusedBeforeModalWasOpened)).getBoundingClientRect();
            /** @type {?} */
            var lastPosition = getElementOffset((/** @type {?} */ (this.elementFocusedBeforeModalWasOpened)));
            /** @type {?} */
            var x = lastPosition.left + previouslyDOMRect.width / 2;
            /** @type {?} */
            var y = lastPosition.top + previouslyDOMRect.height / 2;
            /** @type {?} */
            var transformOrigin = x - modalElement.offsetLeft + "px " + (y - modalElement.offsetTop) + "px 0px";
            this.render.setStyle(modalElement, 'transform-origin', transformOrigin);
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.savePreviouslyFocusedElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.document) {
            this.elementFocusedBeforeModalWasOpened = (/** @type {?} */ (this.document.activeElement));
            if (this.elementRef.nativeElement.focus) {
                Promise.resolve().then((/**
                 * @return {?}
                 */
                function () { return _this.elementRef.nativeElement.focus(); }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.trapFocus = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.elementRef.nativeElement;
        if (!this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(element);
        }
        if (this.config.nzAutofocus) {
            this.focusTrap.focusInitialElementWhenReady().then();
        }
        else {
            /** @type {?} */
            var activeElement = this.document.activeElement;
            if (activeElement !== element && !element.contains(activeElement)) {
                element.focus();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.restoreFocus = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var toFocus = (/** @type {?} */ (this.elementFocusedBeforeModalWasOpened));
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            /** @type {?} */
            var activeElement = (/** @type {?} */ (this.document.activeElement));
            /** @type {?} */
            var element = this.elementRef.nativeElement;
            if (!activeElement || activeElement === this.document.body || activeElement === element || element.contains(activeElement)) {
                toFocus.focus();
            }
        }
        if (this.focusTrap) {
            this.focusTrap.destroy();
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.setEnterAnimationClass = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.animationDisabled()) {
            return;
        }
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // Make sure to set the `TransformOrigin` style before set the modelElement's class names
            _this.setModalTransformOrigin();
            /** @type {?} */
            var modalElement = _this.modalElementRef.nativeElement;
            /** @type {?} */
            var backdropElement = _this.overlayRef.backdropElement;
            _this.render.addClass(modalElement, ZOOM_CLASS_NAME_MAP.enter);
            _this.render.addClass(modalElement, ZOOM_CLASS_NAME_MAP.enterActive);
            _this.render.addClass(backdropElement, FADE_CLASS_NAME_MAP.enter);
            _this.render.addClass(backdropElement, FADE_CLASS_NAME_MAP.enterActive);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.setExitAnimationClass = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var modalElement = _this.modalElementRef.nativeElement;
            /** @type {?} */
            var backdropElement = _this.overlayRef.backdropElement;
            if (_this.animationDisabled()) {
                // https://github.com/angular/components/issues/18645
                _this.render.removeClass(backdropElement, MODAL_MASK_CLASS_NAME);
                return;
            }
            _this.render.addClass(modalElement, ZOOM_CLASS_NAME_MAP.leave);
            _this.render.addClass(modalElement, ZOOM_CLASS_NAME_MAP.leaveActive);
            _this.render.addClass(backdropElement, FADE_CLASS_NAME_MAP.leave);
            _this.render.addClass(backdropElement, FADE_CLASS_NAME_MAP.leaveActive);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.cleanAnimationClass = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.animationDisabled()) {
            return;
        }
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var backdropElement = _this.overlayRef.backdropElement;
            /** @type {?} */
            var modalElement = _this.modalElementRef.nativeElement;
            _this.render.removeClass(modalElement, ZOOM_CLASS_NAME_MAP.enter);
            _this.render.removeClass(modalElement, ZOOM_CLASS_NAME_MAP.enterActive);
            _this.render.removeClass(modalElement, ZOOM_CLASS_NAME_MAP.leave);
            _this.render.removeClass(modalElement, ZOOM_CLASS_NAME_MAP.leaveActive);
            _this.render.removeClass(backdropElement, FADE_CLASS_NAME_MAP.enter);
            _this.render.removeClass(backdropElement, FADE_CLASS_NAME_MAP.enterActive);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.bindBackdropStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.oldMaskStyle) {
                /** @type {?} */
                var backdropElement_1 = _this.overlayRef.backdropElement;
                /** @type {?} */
                var styles = (/** @type {?} */ (_this.oldMaskStyle));
                Object.keys(styles).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    _this.render.removeStyle(backdropElement_1, key);
                }));
                _this.oldMaskStyle = null;
            }
            if (typeof _this.config.nzMaskStyle === 'object' && Object.keys(_this.config.nzMaskStyle).length) {
                /** @type {?} */
                var backdropElement_2 = _this.overlayRef.backdropElement;
                /** @type {?} */
                var styles_1 = __assign({}, _this.config.nzMaskStyle);
                Object.keys(styles_1).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    _this.render.setStyle(backdropElement_2, key, styles_1[key]);
                }));
                _this.oldMaskStyle = styles_1;
            }
        }));
    };
    /**
     * Set the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    /**
     * Set the container element.
     * @deprecated Not supported.
     * \@breaking-change 10.0.0
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.setContainer = /**
     * Set the container element.
     * @deprecated Not supported.
     * \@breaking-change 10.0.0
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var container = this.getContainer();
        if (container) {
            this.render.appendChild(container, this.elementRef.nativeElement);
        }
    };
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * \@breaking-change 10.0.0
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.resetContainer = /**
     * Reset the container element.
     * @deprecated Not supported.
     * \@breaking-change 10.0.0
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var container = this.getContainer();
        if (container) {
            this.render.appendChild(this.overlayRef.overlayElement, this.elementRef.nativeElement);
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseModalContainer.prototype.getContainer = /**
     * @private
     * @return {?}
     */
    function () {
        var nzGetContainer = this.config.nzGetContainer;
        /** @type {?} */
        var container = typeof nzGetContainer === 'function' ? nzGetContainer() : nzGetContainer;
        return container instanceof HTMLElement ? container : null;
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.updateMaskClassname = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var backdropElement = this.overlayRef.backdropElement;
        if (this.showMask) {
            this.render.addClass(backdropElement, MODAL_MASK_CLASS_NAME);
        }
        else {
            this.render.removeClass(backdropElement, MODAL_MASK_CLASS_NAME);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseModalContainer.prototype.onAnimationDone = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.toState === 'void') {
            return;
        }
        if (event.toState === 'enter') {
            this.setContainer();
            this.trapFocus();
        }
        else if (event.toState === 'exit') {
            this.restoreFocus();
        }
        this.cleanAnimationClass();
        this.animationStateChanged.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseModalContainer.prototype.onAnimationStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.toState === 'enter') {
            this.setEnterAnimationClass();
            this.bindBackdropStyle();
        }
        else if (event.toState === 'exit') {
            this.resetContainer();
            this.setExitAnimationClass();
        }
        this.animationStateChanged.emit(event);
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.startExitAnimation = /**
     * @return {?}
     */
    function () {
        this.state = 'exit';
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    BaseModalContainer.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy.emit();
        this.destroy$.next();
        this.destroy$.complete();
    };
    return BaseModalContainer;
}(BasePortalOutlet));
export { BaseModalContainer };
if (false) {
    /** @type {?} */
    BaseModalContainer.prototype.portalOutlet;
    /** @type {?} */
    BaseModalContainer.prototype.modalElementRef;
    /** @type {?} */
    BaseModalContainer.prototype.animationStateChanged;
    /** @type {?} */
    BaseModalContainer.prototype.containerClick;
    /** @type {?} */
    BaseModalContainer.prototype.cancelTriggered;
    /** @type {?} */
    BaseModalContainer.prototype.okTriggered;
    /** @type {?} */
    BaseModalContainer.prototype.onDestroy;
    /** @type {?} */
    BaseModalContainer.prototype.state;
    /** @type {?} */
    BaseModalContainer.prototype.document;
    /** @type {?} */
    BaseModalContainer.prototype.modalRef;
    /** @type {?} */
    BaseModalContainer.prototype.isStringContent;
    /**
     * @type {?}
     * @private
     */
    BaseModalContainer.prototype.elementFocusedBeforeModalWasOpened;
    /**
     * @type {?}
     * @private
     */
    BaseModalContainer.prototype.focusTrap;
    /**
     * @type {?}
     * @private
     */
    BaseModalContainer.prototype.latestMousedownTarget;
    /**
     * @type {?}
     * @private
     */
    BaseModalContainer.prototype.oldMaskStyle;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.focusTrapFactory;
    /** @type {?} */
    BaseModalContainer.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.render;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.zone;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.overlayRef;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.nzConfigService;
    /** @type {?} */
    BaseModalContainer.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    BaseModalContainer.prototype.animationType;
}
//# sourceMappingURL=data:application/json;base64,