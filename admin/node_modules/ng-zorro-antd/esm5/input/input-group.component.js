/**
 * @fileoverview added by tsickle
 * Generated from: input-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata, __read, __spread } from "tslib";
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, Input, QueryList, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import { merge, Subject } from 'rxjs';
import { flatMap, map, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { NzInputDirective } from './input.directive';
var NzInputGroupWhitSuffixOrPrefixDirective = /** @class */ (function () {
    function NzInputGroupWhitSuffixOrPrefixDirective(elementRef) {
        this.elementRef = elementRef;
    }
    NzInputGroupWhitSuffixOrPrefixDirective.decorators = [
        { type: Directive, args: [{
                    selector: "nz-input-group[nzSuffix], nz-input-group[nzPrefix]"
                },] }
    ];
    /** @nocollapse */
    NzInputGroupWhitSuffixOrPrefixDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NzInputGroupWhitSuffixOrPrefixDirective;
}());
export { NzInputGroupWhitSuffixOrPrefixDirective };
if (false) {
    /** @type {?} */
    NzInputGroupWhitSuffixOrPrefixDirective.prototype.elementRef;
}
var NzInputGroupComponent = /** @class */ (function () {
    function NzInputGroupComponent(focusMonitor, elementRef, cdr) {
        this.focusMonitor = focusMonitor;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.nzAddOnBeforeIcon = null;
        this.nzAddOnAfterIcon = null;
        this.nzPrefixIcon = null;
        this.nzSuffixIcon = null;
        this.nzSize = 'default';
        this.nzSearch = false;
        this.nzCompact = false;
        this.isLarge = false;
        this.isSmall = false;
        this.isAffix = false;
        this.isAddOn = false;
        this.focused = false;
        this.disabled = false;
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    NzInputGroupComponent.prototype.updateChildrenInputSize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.listOfNzInputDirective) {
            this.listOfNzInputDirective.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return (item.nzSize = _this.nzSize); }));
        }
    };
    /**
     * @return {?}
     */
    NzInputGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusMonitor
            .monitor(this.elementRef, true)
            .pipe(takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} focusOrigin
         * @return {?}
         */
        function (focusOrigin) {
            _this.focused = !!focusOrigin;
            _this.cdr.markForCheck();
        }));
    };
    /**
     * @return {?}
     */
    NzInputGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateChildrenInputSize();
        /** @type {?} */
        var listOfInputChange$ = this.listOfNzInputDirective.changes.pipe(startWith(this.listOfNzInputDirective));
        listOfInputChange$
            .pipe(switchMap((/**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            return merge.apply(void 0, __spread([listOfInputChange$], list.map((/**
             * @param {?} input
             * @return {?}
             */
            function (input) { return input.disabled$; }))));
        })), flatMap((/**
         * @return {?}
         */
        function () { return listOfInputChange$; })), map((/**
         * @param {?} list
         * @return {?}
         */
        function (list) { return list.some((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return input.disabled; })); })), takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            _this.disabled = disabled;
            _this.cdr.markForCheck();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzInputGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzSize = changes.nzSize, nzSuffix = changes.nzSuffix, nzPrefix = changes.nzPrefix, nzPrefixIcon = changes.nzPrefixIcon, nzSuffixIcon = changes.nzSuffixIcon, nzAddOnAfter = changes.nzAddOnAfter, nzAddOnBefore = changes.nzAddOnBefore, nzAddOnAfterIcon = changes.nzAddOnAfterIcon, nzAddOnBeforeIcon = changes.nzAddOnBeforeIcon;
        if (nzSize) {
            this.updateChildrenInputSize();
            this.isLarge = this.nzSize === 'large';
            this.isSmall = this.nzSize === 'small';
        }
        if (nzSuffix || nzPrefix || nzPrefixIcon || nzSuffixIcon) {
            this.isAffix = !!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon);
        }
        if (nzAddOnAfter || nzAddOnBefore || nzAddOnAfterIcon || nzAddOnBeforeIcon) {
            this.isAddOn = !!(this.nzAddOnAfter || this.nzAddOnBefore || this.nzAddOnAfterIcon || this.nzAddOnBeforeIcon);
        }
    };
    /**
     * @return {?}
     */
    NzInputGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NzInputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nz-input-group',
                    exportAs: 'nzInputGroup',
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <span class=\"ant-input-wrapper ant-input-group\" *ngIf=\"isAddOn; else noAddOnTemplate\">\n      <span\n        *ngIf=\"nzAddOnBefore || nzAddOnBeforeIcon\"\n        nz-input-group-slot\n        type=\"addon\"\n        [icon]=\"nzAddOnBeforeIcon\"\n        [template]=\"nzAddOnBefore\"\n      >\n      </span>\n      <span\n        *ngIf=\"isAffix; else contentTemplate\"\n        class=\"ant-input-affix-wrapper\"\n        [class.ant-input-affix-wrapper-sm]=\"isSmall\"\n        [class.ant-input-affix-wrapper-lg]=\"isLarge\"\n      >\n        <ng-template [ngTemplateOutlet]=\"affixTemplate\"></ng-template>\n      </span>\n      <span\n        *ngIf=\"nzAddOnAfter || nzAddOnAfterIcon\"\n        nz-input-group-slot\n        type=\"addon\"\n        [icon]=\"nzAddOnAfterIcon\"\n        [template]=\"nzAddOnAfter\"\n      ></span>\n    </span>\n    <ng-template #noAddOnTemplate>\n      <ng-template [ngIf]=\"isAffix\" [ngIfElse]=\"contentTemplate\">\n        <ng-template [ngTemplateOutlet]=\"affixTemplate\"></ng-template>\n      </ng-template>\n    </ng-template>\n    <ng-template #affixTemplate>\n      <span *ngIf=\"nzPrefix || nzPrefixIcon\" nz-input-group-slot type=\"prefix\" [icon]=\"nzPrefixIcon\" [template]=\"nzPrefix\"></span>\n      <ng-template [ngTemplateOutlet]=\"contentTemplate\"></ng-template>\n      <span *ngIf=\"nzSuffix || nzSuffixIcon\" nz-input-group-slot type=\"suffix\" [icon]=\"nzSuffixIcon\" [template]=\"nzSuffix\"></span>\n    </ng-template>\n    <ng-template #contentTemplate>\n      <ng-content></ng-content>\n    </ng-template>\n  ",
                    host: {
                        '[class.ant-input-group-compact]': "nzCompact",
                        '[class.ant-input-search-enter-button]': "nzSearch",
                        '[class.ant-input-search]': "nzSearch",
                        '[class.ant-input-search-sm]': "nzSearch && isSmall",
                        '[class.ant-input-search-large]': "nzSearch && isLarge",
                        '[class.ant-input-group-wrapper]': "isAddOn",
                        '[class.ant-input-group-wrapper-lg]': "isAddOn && isLarge",
                        '[class.ant-input-group-wrapper-sm]': "isAddOn && isSmall",
                        '[class.ant-input-affix-wrapper]': "isAffix && !isAddOn",
                        '[class.ant-input-affix-wrapper-focused]': "isAffix && focused",
                        '[class.ant-input-affix-wrapper-disabled]': "isAffix && disabled",
                        '[class.ant-input-affix-wrapper-lg]': "isAffix && !isAddOn && isLarge",
                        '[class.ant-input-affix-wrapper-sm]': "isAffix && !isAddOn && isSmall",
                        '[class.ant-input-group]': "!isAffix && !isAddOn",
                        '[class.ant-input-group-lg]': "!isAffix && !isAddOn && isLarge",
                        '[class.ant-input-group-sm]': "!isAffix && !isAddOn && isSmall"
                    }
                }] }
    ];
    /** @nocollapse */
    NzInputGroupComponent.ctorParameters = function () { return [
        { type: FocusMonitor },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NzInputGroupComponent.propDecorators = {
        listOfNzInputDirective: [{ type: ContentChildren, args: [NzInputDirective,] }],
        nzAddOnBeforeIcon: [{ type: Input }],
        nzAddOnAfterIcon: [{ type: Input }],
        nzPrefixIcon: [{ type: Input }],
        nzSuffixIcon: [{ type: Input }],
        nzAddOnBefore: [{ type: Input }],
        nzAddOnAfter: [{ type: Input }],
        nzPrefix: [{ type: Input }],
        nzSuffix: [{ type: Input }],
        nzSize: [{ type: Input }],
        nzSearch: [{ type: Input }],
        nzCompact: [{ type: Input }]
    };
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzInputGroupComponent.prototype, "nzSearch", void 0);
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzInputGroupComponent.prototype, "nzCompact", void 0);
    return NzInputGroupComponent;
}());
export { NzInputGroupComponent };
if (false) {
    /** @type {?} */
    NzInputGroupComponent.ngAcceptInputType_nzSearch;
    /** @type {?} */
    NzInputGroupComponent.ngAcceptInputType_nzCompact;
    /** @type {?} */
    NzInputGroupComponent.prototype.listOfNzInputDirective;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzAddOnBeforeIcon;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzAddOnAfterIcon;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzPrefixIcon;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzSuffixIcon;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzAddOnBefore;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzAddOnAfter;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzPrefix;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzSuffix;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzSize;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzSearch;
    /** @type {?} */
    NzInputGroupComponent.prototype.nzCompact;
    /** @type {?} */
    NzInputGroupComponent.prototype.isLarge;
    /** @type {?} */
    NzInputGroupComponent.prototype.isSmall;
    /** @type {?} */
    NzInputGroupComponent.prototype.isAffix;
    /** @type {?} */
    NzInputGroupComponent.prototype.isAddOn;
    /** @type {?} */
    NzInputGroupComponent.prototype.focused;
    /** @type {?} */
    NzInputGroupComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    NzInputGroupComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NzInputGroupComponent.prototype.focusMonitor;
    /**
     * @type {?}
     * @private
     */
    NzInputGroupComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NzInputGroupComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,