/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { BooleanInput } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzTableFilterFn, NzTableFilterList, NzTableFilterValue, NzTableSortFn, NzTableSortOrder } from '../table.types';
import * as ɵngcc0 from '@angular/core';
export declare class NzThAddOnComponent implements OnChanges, OnInit, OnDestroy {
    private cdr;
    static ngAcceptInputType_nzShowSort: BooleanInput;
    static ngAcceptInputType_nzShowFilter: BooleanInput;
    static ngAcceptInputType_nzCustomFilter: BooleanInput;
    manualClickOrder$: Subject<NzThAddOnComponent>;
    calcOperatorChange$: Subject<unknown>;
    nzFilterValue: NzTableFilterValue;
    sortOrder: NzTableSortOrder;
    sortDirections: NzTableSortOrder[];
    private sortOrderChange$;
    private destroy$;
    private isNzShowSortChanged;
    private isNzShowFilterChanged;
    nzColumnKey?: string;
    nzFilterMultiple: boolean;
    nzSortOrder: NzTableSortOrder;
    nzSortPriority: number | boolean;
    nzSortDirections: NzTableSortOrder[];
    nzFilters: NzTableFilterList;
    nzSortFn: NzTableSortFn | boolean | null;
    nzFilterFn: NzTableFilterFn | boolean | null;
    nzShowSort: boolean;
    nzShowFilter: boolean;
    nzCustomFilter: boolean;
    readonly nzCheckedChange: EventEmitter<boolean>;
    readonly nzSortOrderChange: EventEmitter<NzTableSortOrder>;
    readonly nzFilterChange: EventEmitter<any>;
    /** @deprecated use nzColumnKey instead **/
    nzSortKey?: string;
    /** @deprecated use nzSortOrder instead **/
    nzSort: NzTableSortOrder;
    /** @deprecated use nzSortOrderChange instead **/
    readonly nzSortChange: EventEmitter<NzTableSortOrder>;
    getNextSortDirection(sortDirections: NzTableSortOrder[], current: NzTableSortOrder): NzTableSortOrder;
    emitNextSortValue(): void;
    setSortOrder(order: NzTableSortOrder): void;
    clearSortOrder(): void;
    onFilterValueChange(value: NzTableFilterValue): void;
    updateCalcOperator(): void;
    constructor(cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzThAddOnComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzThAddOnComponent, "th[nzSortKey], th[nzColumnKey], th[nzSort], th[nzSortFn], th[nzSortOrder], th[nzFilters], th[nzShowSort], th[nzShowFilter], th[nzCustomFilter]", never, { "nzFilterMultiple": "nzFilterMultiple"; "nzSortOrder": "nzSortOrder"; "nzSortPriority": "nzSortPriority"; "nzSortDirections": "nzSortDirections"; "nzFilters": "nzFilters"; "nzSortFn": "nzSortFn"; "nzFilterFn": "nzFilterFn"; "nzShowSort": "nzShowSort"; "nzShowFilter": "nzShowFilter"; "nzCustomFilter": "nzCustomFilter"; "nzSort": "nzSort"; "nzColumnKey": "nzColumnKey"; "nzSortKey": "nzSortKey"; }, { "nzCheckedChange": "nzCheckedChange"; "nzSortOrderChange": "nzSortOrderChange"; "nzFilterChange": "nzFilterChange"; "nzSortChange": "nzSortChange"; }, never, ["[nz-th-extra]", "nz-filter-trigger", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtYWRkb24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRoLWFkZG9uLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOelRhYmxlRmlsdGVyRm4sIE56VGFibGVGaWx0ZXJMaXN0LCBOelRhYmxlRmlsdGVyVmFsdWUsIE56VGFibGVTb3J0Rm4sIE56VGFibGVTb3J0T3JkZXIgfSBmcm9tICcuLi90YWJsZS50eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelRoQWRkT25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93U29ydDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dGaWx0ZXI6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpDdXN0b21GaWx0ZXI6IEJvb2xlYW5JbnB1dDtcbiAgICBtYW51YWxDbGlja09yZGVyJDogU3ViamVjdDxOelRoQWRkT25Db21wb25lbnQ+O1xuICAgIGNhbGNPcGVyYXRvckNoYW5nZSQ6IFN1YmplY3Q8dW5rbm93bj47XG4gICAgbnpGaWx0ZXJWYWx1ZTogTnpUYWJsZUZpbHRlclZhbHVlO1xuICAgIHNvcnRPcmRlcjogTnpUYWJsZVNvcnRPcmRlcjtcbiAgICBzb3J0RGlyZWN0aW9uczogTnpUYWJsZVNvcnRPcmRlcltdO1xuICAgIHByaXZhdGUgc29ydE9yZGVyQ2hhbmdlJDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgaXNOelNob3dTb3J0Q2hhbmdlZDtcbiAgICBwcml2YXRlIGlzTnpTaG93RmlsdGVyQ2hhbmdlZDtcbiAgICBuekNvbHVtbktleT86IHN0cmluZztcbiAgICBuekZpbHRlck11bHRpcGxlOiBib29sZWFuO1xuICAgIG56U29ydE9yZGVyOiBOelRhYmxlU29ydE9yZGVyO1xuICAgIG56U29ydFByaW9yaXR5OiBudW1iZXIgfCBib29sZWFuO1xuICAgIG56U29ydERpcmVjdGlvbnM6IE56VGFibGVTb3J0T3JkZXJbXTtcbiAgICBuekZpbHRlcnM6IE56VGFibGVGaWx0ZXJMaXN0O1xuICAgIG56U29ydEZuOiBOelRhYmxlU29ydEZuIHwgYm9vbGVhbiB8IG51bGw7XG4gICAgbnpGaWx0ZXJGbjogTnpUYWJsZUZpbHRlckZuIHwgYm9vbGVhbiB8IG51bGw7XG4gICAgbnpTaG93U29ydDogYm9vbGVhbjtcbiAgICBuelNob3dGaWx0ZXI6IGJvb2xlYW47XG4gICAgbnpDdXN0b21GaWx0ZXI6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbnpDaGVja2VkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgcmVhZG9ubHkgbnpTb3J0T3JkZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOelRhYmxlU29ydE9yZGVyPjtcbiAgICByZWFkb25seSBuekZpbHRlckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSBuekNvbHVtbktleSBpbnN0ZWFkICoqL1xuICAgIG56U29ydEtleT86IHN0cmluZztcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIG56U29ydE9yZGVyIGluc3RlYWQgKiovXG4gICAgbnpTb3J0OiBOelRhYmxlU29ydE9yZGVyO1xuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgbnpTb3J0T3JkZXJDaGFuZ2UgaW5zdGVhZCAqKi9cbiAgICByZWFkb25seSBuelNvcnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOelRhYmxlU29ydE9yZGVyPjtcbiAgICBnZXROZXh0U29ydERpcmVjdGlvbihzb3J0RGlyZWN0aW9uczogTnpUYWJsZVNvcnRPcmRlcltdLCBjdXJyZW50OiBOelRhYmxlU29ydE9yZGVyKTogTnpUYWJsZVNvcnRPcmRlcjtcbiAgICBlbWl0TmV4dFNvcnRWYWx1ZSgpOiB2b2lkO1xuICAgIHNldFNvcnRPcmRlcihvcmRlcjogTnpUYWJsZVNvcnRPcmRlcik6IHZvaWQ7XG4gICAgY2xlYXJTb3J0T3JkZXIoKTogdm9pZDtcbiAgICBvbkZpbHRlclZhbHVlQ2hhbmdlKHZhbHVlOiBOelRhYmxlRmlsdGVyVmFsdWUpOiB2b2lkO1xuICAgIHVwZGF0ZUNhbGNPcGVyYXRvcigpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==